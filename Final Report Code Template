#include <LiquidCrystal.h>
#include <Keypad.h>
//code from lquid crystal 
 const int RS = 11, EN = 12, D4 = 2, D5 = 3, D6 = 4, D7 = 5;
 const int RC_NUM = 4;
 char keys[RC_NUM][RC_NUM] = {
   {'1','2','3','A'},
   {'4','5','6','B'},
   {'7','8','9','C'},
   {'*','0','#','D'}
 };

 byte pin_rows[RC_NUM] = {30, 31, 32, 33};
 byte pin_column[RC_NUM] = {38, 39, 40, 41};

 Keypad keypad = Keypad(makeKeymap(keys), pin_rows, pin_column, RC_NUM, RC_NUM);

 LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);

 void setup() {
   Serial.begin(9600);
   lcd.begin(16,2);
   lcd.setCursor(0,0);

  
 }

 void loop() {
   char key = keypad.getKey();
   if (key){
 	lcd.clear();
 	lcd.print(key);
   }

 }

//code from echo

 #define RDA 0x80
 #define TBE 0x20  
 volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
 volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
 volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
 volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
 volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;
//
// main()
//
void setup()
{
 // initialize the serial port on USART0:
 U0init(9600);
}
void loop()
{
  unsigned char cs1;
  while (U0kbhit()==0){}; // wait for RDA = true
  cs1 = U0getchar();    // read character
  //U0putchar(cs1);     // echo character
    
  unsigned char first_letter = cs1/16 + '0';
  unsigned char second_letter = cs1%16 + '0';

  if(first_letter > '9'){
    first_letter += 7;
  }
  if(second_letter > '9'){
    second_letter += 7;
  }
  
  U0putchar('0');
  U0putchar('x');
  U0putchar(first_letter);
  U0putchar(second_letter);
}
//
// function to initialize USART0 to "int" Baud, 8 data bits,
// no parity, and one stop bit. Assume FCPU = 16MHz.
//
void U0init(unsigned long U0baud)
{
//  Students are responsible for understanding
//  this initialization code for the ATmega2560 USART0
//  and will be expected to be able to intialize
//  the USART in differrent modes.
//
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}
//
// Read USART0 RDA status bit and return non-zero true if set
//
unsigned char U0kbhit()
{
  return (*myUCSR0A & RDA);
}
//
// Read input character from USART0 input buffer
//
unsigned char U0getchar()
{
  return *myUDR0;
}
//
// Wait for USART0 (myUCSR0A) TBE to be set then write character to
// transmit buffer
//
void U0putchar(unsigned char U0pdata)
{
  while(!(*myUCSR0A & TBE));
    *myUDR0 = U0pdata;
}
