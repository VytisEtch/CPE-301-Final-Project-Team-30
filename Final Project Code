//Vytis Etchegoyhen, David Tsuchiya, Artur Volkau, Tristan Eaton 

//LCD DISPLAY ====================================================
#include <LiquidCrystal.h>
const int RS = 9, EN = 8, D4 = 5, D5 = 4, D6 = 3, D7 = 2;
LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);

//STEPPER MOTOR ==================================================
#include <Stepper.h>
const int stepsPerRevolution = 200;
Stepper stepper(stepsPerRevolution, 16, 19, 17, 18);

//BUTTONS/LED ====================================================

// Define Port B Register Pointers
volatile unsigned char* port_b = (unsigned char*) 0x25;
volatile unsigned char* ddr_b  = (unsigned char*) 0x24;
volatile unsigned char* pin_b  = (unsigned char*) 0x23;
// Define Port C Register Pointers
volatile unsigned char* port_c = (unsigned char*) 0x28;
volatile unsigned char* ddr_c  = (unsigned char*) 0x27;
volatile unsigned char* pin_c  = (unsigned char*) 0x26;

//WATER SENSOR ===================================================
#define RDA 0x80
#define TBE 0x20

volatile unsigned char *myUCSR0A = (unsigned char *)0x00C0;
volatile unsigned char *myUCSR0B = (unsigned char *)0x00C1;
volatile unsigned char *myUCSR0C = (unsigned char *)0x00C2;
volatile unsigned int  *myUBRR0  = (unsigned int *) 0x00C4;
volatile unsigned char *myUDR0   = (unsigned char *)0x00C6;
 
volatile unsigned char* my_ADMUX = (unsigned char*) 0x7C;
volatile unsigned char* my_ADCSRB = (unsigned char*) 0x7B;
volatile unsigned char* my_ADCSRA = (unsigned char*) 0x7A;
volatile unsigned int* my_ADC_DATA = (unsigned int*) 0x78;
#define threshold_display 35

//TEMP/HUMIDITY SENSOR ===========================================
#include <DHT.h>
#define DHTPIN 6 
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
#define temp_threshold 25

//FAN ============================================================
volatile unsigned char* port_a = (unsigned char*) 0x22;
volatile unsigned char* ddr_a  = (unsigned char*) 0x21;
volatile unsigned char* pin_a  = (unsigned char*) 0x20;

int state = 1;
float temp = 0.1;
int voltage = 100;
unsigned long previousMillis = 0; 
const long interval = 100000;
//================================================================

void setup() 
{
   // setup the UART
  U0init(9600);
  // setup the ADC
  adc_init();

  dht.begin();
  lcd.begin(16, 2);   // Initialize the LCD (if you're using one)
  lcd.setCursor(0, 0);  // Set cursor to the first row
  stepper.setSpeed(100);

  //set PC(0-1, 5-7) to INPUT
  *ddr_c &= B00000000;
  // enable the pullup resistor on PC(0-1, 5-7)
  *port_c |= B11100011;

  //set PB(0-3) to OUTPUT
  *ddr_b = B00001111;
  //set A0 to OUTPUT
  *ddr_a = B00000001;
}

//===============================================================

void loop()
{
  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
  }else{
  //All States Except Disabled
  if(state == 2 || state == 3 || state == 4){
    //Monitor Stop Button (go to disabled state)
    if(!(*pin_c & (1 << PC6))){
      state = 1;
    }

    //Monitor Water (per min)
    voltage = adc_read(0);// read the water sensor value by calling adc_read()
    if(voltage < threshold_display){
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("ALERT!!: ");
      lcd.print(voltage);
      state = 4;
    }else{
      //Monitor Humidity and Temp (per min) 
      float humid = dht.readHumidity(); // Reads humidity
      temp = dht.readTemperature(); //Reads Temperature

      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Humidity: ");
      lcd.print(humid);
      lcd.print("%");
      lcd.setCursor(0, 1);
      lcd.print("Temp: ");
      lcd.print(temp);
      lcd.print("C");

      //Ventilation Changes (Stepper Motor)
      if(!(*pin_c & (1 << PC1))){ //Left Button
        stepper.step(25);
        *port_b |= B00000100;
        *port_b &= B00000100;
      }else if(!(*pin_c & (1 << PC0))){ //Right Button
        stepper.step(-25);
        *port_b |= B00000010;
        *port_b &= B00000010;
      }
    }
  }
    //int state = 1;  //(1)Disabled, (2)Idle, (3)Running, (4)Error
    //State Logic
    if(state == 1){ //Disabled
      //TURN Yellow on
      *port_b |= B00001000;
      *port_b &= B00001000;
      //Fan off
      *port_a &= B00000000;
      //Monitor Start Button
      if(!(*pin_c & (1 << PC7))){
        state = 2;
      }
    }
    else if(state == 2){ //Idle
      //TURN Green on
      *port_b |= B00000100;
      *port_b &= B00000100;

      if(temp > temp_threshold){
        state = 3;
      }
    }
    else if(state == 3){ //Running
      //TURN Blue on
      *port_b |= B00000010;
      *port_b &= B00000010;
      //Fan on
      *port_a |= B00000001;
      
      //Monitor Temp <= threshold
      if(temp <= temp_threshold){
        state = 2;
      }
    }
    else if(state == 4){ //Error
      //TURN Red on
      *port_b |= B00000001;
      *port_b &= B00000001;

      //TURN FAN OFF
      *port_a &= B00000000;

      //Monitor Reset Button & Water Level
      if((!(*pin_c & (1 << PC5))) && (voltage > threshold_display)){ //only reset button rn
        state = 2;
      }
    }
  }
}
void adc_init() //write your code after each commented line and follow the instruction 
{
// setup the A register
  // set bit   7 to 1 to enable the ADC
  *my_ADCSRA |= 0B10000000;
  // clear bit 6 to 0 to disable the ADC trigger mode
  *my_ADCSRA &= 0B10111111;
  // clear bit 5 to 0 to disable the ADC interrupt
  *my_ADCSRA &= 0B11011111;
  // clear bit 0-2 to 0 to set prescaler selection to slow reading
  *my_ADCSRA &= 0B11111000;
// setup the B register
  // clear bit 3 to 0 to reset the channel and gain bits
  *my_ADCSRB &= 0B11110111;
  // clear bit 2-0 to 0 to set free running mode
  *my_ADCSRB &= 0B11111000;
// setup the MUX Register
 // clear bit 7 to 0 for AVCC analog reference
  *my_ADMUX &= 0B01111111;
  // set bit 6 to 1 for AVCC analog reference
  *my_ADMUX |= 0B01000000;
  // clear bit 5 to 0 for right adjust result
  *my_ADMUX &= 0B11011111;
 // clear bit 4-0 to 0 to reset the channel and gain bits
  *my_ADMUX &= 0B11100000;
}
unsigned int adc_read(unsigned char adc_channel_num) //work with channel 0
{
  // clear the channel selection bits (MUX 4:0)
  *my_ADMUX &= 0B11100000;

  // clear the channel selection bits (MUX 5) hint: it's not in the ADMUX register
  // set the channel selection bits for channel 0
  *my_ADCSRB &= 0B11110111;
  // set bit 6 of ADCSRA to 1 to start a conversion
  *my_ADMUX += adc_channel_num;
  *my_ADCSRA |= 0x40;
  // wait for the conversion to complete

  while((*my_ADCSRA & 0x40) != 0);
  // return the result in the ADC data register and format the data based on right justification (check the lecture slide)
  
  //unsigned int val = ??
  return (*my_ADC_DATA & 0x03FF);
}

void U0init(int U0baud)
{
 unsigned long FCPU = 16000000;
 unsigned int tbaud;
 tbaud = (FCPU / 16 / U0baud - 1);
 // Same as (FCPU / (16 * U0baud)) - 1;
 *myUCSR0A = 0x20;
 *myUCSR0B = 0x18;
 *myUCSR0C = 0x06;
 *myUBRR0  = tbaud;
}
unsigned char U0kbhit()
{
  return *myUCSR0A & RDA;
}

unsigned char U0getchar()
{
  return *myUDR0;
}

void U0putchar(unsigned char U0pdata)
{
  while((*myUCSR0A & TBE)==0);
  *myUDR0 = U0pdata;
}
